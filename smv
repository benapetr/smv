#!/bin/env python

# SMV allows for "smart file / folder moves"
# Copyright 2016 petr@bena.rocks

# Licensed under GNU GPLv3

import argparse
import sys
import os

parser = argparse.ArgumentParser(description='SMV is a "smart move" command that allows for more advanced folder / file moves, for example preserving the file hierarchy, or matching only older folders and files')
parser.add_argument('-r', '--recursive', action='store_true', help='move directories recursively')
parser.add_argument('-v', '--verbose', action='store_true', help='provides more output')
parser.add_argument('-i', '--interactive', action='store_true', help='ask in case move would overwrite some file')
parser.add_argument('-f', '--force', action='store_true', help='ignore all errors')
parser.add_argument('-d', '--dry', action='store_true', help='does not do any actualy filesystem changes, only pretend to do them, useful in combination with -v to see what would happen if you run this command')
parser.add_argument('-a', '--root', type=str, help='Alternative root folder, useful when you combine smv with commands like find, it allows you to specify a root from which the move takes place. For example if you tell smv to move /root/test/file to /tmp it would normally move just file to /tmp/file, but if you use alternative root folder --root /root it will move it from /root resulting in /tmp/test/file')
parser.add_argument('source', metavar='SOURCE', type=str, nargs='+', help='List of folders or files to move')
parser.add_argument('destination', metavar='DESTINATION', type=str, help='Target into which you wish to move source')

args = parser.parse_args()

def sanitize_path(name):
    name = name.replace("/./", "/")
    while ("//" in name):
        name = name.replace("//", "/")
    return name

def sanitize_dir(name):
    if (not name.endswith("/")):
        name = name + "/"
    return sanitize_path(name)

dir_move = os.path.isdir(args.destination)
sanitized_destination = args.destination
if (dir_move):
    sanitized_destination = sanitize_dir(args.destination)

def verbose_print(text):
    if (not args.verbose):
        return
    print (text)

def fatal(text):
    print("ERROR: " + text)
    sys.exit(1)

def semi_fatal(text):
    if (not args.force):
        print(text)
        sys.exit(1)
    else:
        verbose_print(text)

def smart_move(source, destination):
    # Check if source exists
    if (not os.path.exists(source)):
        semi_fatal(source + ": not found")
        return
    if (os.path.isdir(source)):
        if (not args.recursive):
            semi_fatal(source + ": is a directory")
            return
        #else:
            # recursive move of all items inside of the folder
            # this is only needed with alternative root or some specific option, otherwise classic move is sufficient
        #    if (args.root is not None):
        #        items = os.listdir(source)
        #        for i in items:
        #            t = source + i
        #            d = destination
        #            if (os.path.isdir(t)):
        #                d = destination + i
        #                if (not i.endswith("/")):
        #                   d = d + "/"
        #                   t = t + "/"
        #            smart_move(t, d)
        #        return
    final_destination = destination
    if (dir_move):
        # Target is a directory, we need to append a target name to it
        final_destination = destination + source
        # Get a parent directory of target
        parent = final_destination
        while (not parent.endswith("/")):
            parent = parent[:-1]
        if (not os.path.exists(parent)):
            # New target path doesn't exist yet, let's create it
            if (not args.dry):
               os.makedirs(parent)
    if (not args.dry):
        os.rename(source,final_destination)
    verbose_print(source + " -> " + final_destination)


# move the sources to destination
for source in args.source:
    # convert to absolute path
    abspath = os.path.abspath(source)
    if (args.root is not None):
        if (args.root not in abspath):
            semi_fatal("Alternative root '" + args.root + "' doesn't seem to be a part of source's path: " + abspath)
            continue
        else:
            # cut the extra path from source and append it to destination
            extra_dest = abspath[len(args.root):]
            if (not sanitized_destination.endswith("/") and not extra_dest.startswith("/")):
                sanitized_destination = sanitized_destination + "/"
            sanitized_destination = sanitized_destination + extra_dest
    sanitized_source = source
    if (os.path.isdir(source)):
        sanitized_source = sanitize_dir(sanitized_source)
    smart_move(sanitized_source, sanitized_destination)
